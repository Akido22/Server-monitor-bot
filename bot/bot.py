# bot/bot.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
import paramiko
from pypsrp.client import Client
import json
import os
from datetime import datetime
from config import TOKEN, ADMIN_USER_ID, SERVERS

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
server_status = {}
monitoring_job = None
CHECK_INTERVAL = 5 * 60  # 5 –º–∏–Ω—É—Ç

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECTING_SERVER, SELECTING_ACTION, ENTERING_COMMAND = range(3)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
def restricted(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id != ADMIN_USER_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapper

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–æ–π ===
@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üñ• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="manage_servers")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# === –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ ===
async def manage_servers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = []
    for server_id, info in SERVERS.items():
        keyboard.append([InlineKeyboardButton(
            f"üîß {server_id} ({info['host']})",
            callback_data=f"server:{server_id}"
        )])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=reply_markup)
    return SELECTING_SERVER

# === –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è ===
async def select_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    server_id = query.data.split(":")[1]
    context.user_data['selected_server'] = server_id
    keyboard = [
        [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="action:status")],
        [InlineKeyboardButton("‚öôÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="action:cmd")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_servers"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–°–µ—Ä–≤–µ—Ä: *{server_id}*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode='Markdown', reply_markup=reply_markup)
    return SELECTING_ACTION

# === –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è ===
async def execute_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data.split(":")[1]
    server_id = context.user_data.get('selected_server')
    server = SERVERS[server_id]

    if action == "status":
        if server["type"] == "linux":
            is_up, msg = get_linux_status(server["host"], server["port"], server["user"], server["password"])
        elif server["type"] == "windows":
            is_up, msg = get_windows_status(server["host"], server["port"], server["user"], server["password"])
        else:
            is_up, msg = False, "Unknown"

        emoji = "üü¢" if is_up else "üî¥"
        response = f"{emoji} **{server_id}**\n`{server['host']}`\n\n"
        response += "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if is_up else f"‚ùå –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç\n\n`{msg[:200]}`"

        keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"server:{server_id}")]]
        await query.edit_message_text(response, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))
        return SELECTING_ACTION

    elif action == "cmd":
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è `{server_id}`:\n\n–ü—Ä–∏–º–µ—Ä:\n`df -h`\n`Get-Service WinDefend`",
            parse_mode='Markdown'
        )
        return ENTERING_COMMAND

# === –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã ===
async def handle_command_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    command = update.message.text.strip()
    server_id = context.user_data.get('selected_server')
    server = SERVERS[server_id]
    host = server["host"]
    user = server["user"]
    password = server["password"]

    try:
        if server["type"] == "linux":
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(hostname=host, port=server["port"], username=user, password=password, timeout=10)
            stdin, stdout, stderr = ssh.exec_command(command)
            output = stdout.read().decode() or "–ù–µ—Ç –≤—ã–≤–æ–¥–∞"
            error = stderr.read().decode()
            ssh.close()
            response = f"üñ•Ô∏è `{server_id}`\n\n" + ("‚ùå –û—à–∏–±–∫–∞:\n`"+error+"`" if error else "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n`"+output[:3900]+"`")

        elif server["type"] == "windows":
            client = Client(host, username=user, password=password, ssl=False, port=server["port"], auth="ntlm")
            output, streams, had_errors = client.execute_ps(command)
            client.close()
            response = f"üíª `{server_id}`\n\n" + (
                "‚ùå –û—à–∏–±–∫–∏:\n`" + ''.join(streams.error)[:3900] + "`" if had_errors
                else "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n`" + str(output)[:3900] + "`"
            )

        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(f"üî¥ –û—à–∏–±–∫–∞: `{str(e)}`", parse_mode='Markdown')

    # –í–µ—Ä–Ω—É—Ç—å –≤ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    server_id = context.user_data.get('selected_server')
    keyboard = [
        [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="action:status")],
        [InlineKeyboardButton("‚öôÔ∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="action:cmd")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_servers"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    await update.message.reply_text(
        f"–°–µ—Ä–≤–µ—Ä: *{server_id}*\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECTING_ACTION

# === Linux Status ===
def get_linux_status(host, port, user, password):
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(hostname=host, port=port, username=user, password=password, timeout=8)
        stdin, stdout, stderr = client.exec_command("uptime")
        output = stdout.read().decode().strip()
        client.close()
        return True, output
    except Exception as e:
        return False, str(e)

# === Windows Status ===
def get_windows_status(host, port, user, password):
    try:
        client = Client(host, username=user, password=password, ssl=False, port=port, auth="ntlm")
        script = "(Get-Date).ToString()"
        output, streams, had_errors = client.execute_ps(script)
        client.close()
        return (False, streams.error[0]) if had_errors else (True, "Online")
    except Exception as e:
        return False, str(e)

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ JSON ===
def check_all_servers():
    results = {}
    for name, info in SERVERS.items():
        host = info["host"]
        if info["type"] == "linux":
            is_up, msg = get_linux_status(host, info["port"], info["user"], info["password"])
        elif info["type"] == "windows":
            is_up, msg = get_windows_status(host, info["port"], info["user"], info["password"])
        else:
            is_up, msg = False, "Unknown"
        results[name] = {"up": is_up, "msg": msg, "host": host, "timestamp": datetime.now().isoformat()}
    return results

# === –ê–≤—Ç–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ===
async def periodic_check(context: ContextTypes.DEFAULT_TYPE):
    global server_status
    current = check_all_servers()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    try:
        with open("/app/data/server_status.json", "w") as f:
            json.dump(current, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")

    if not server_status:
        server_status = current
        return

    chat_id = ADMIN_USER_ID
    for name, data in current.items():
        prev = server_status.get(name)
        if not prev:
            continue
        if prev["up"] and not data["up"]:
            await context.bot.send_message(chat_id, f"üî¥ **–°–ï–†–í–ï–† –£–ü–ê–õ**\nüìõ {name} ({data['host']})", parse_mode='Markdown')
        elif not prev["up"] and data["up"]:
            await context.bot.send_message(chat_id, f"üü¢ **–°–ï–†–í–ï–† –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù**\n‚úÖ {name} ({data['host']})", parse_mode='Markdown')
    server_status = current

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def back_to_servers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await manage_servers(update, context)

async def cancel_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

@restricted
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõë –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    return ConversationHandler.END

# === Web App –¥–ª—è –≤–µ–±-–ø–∞–Ω–µ–ª–∏ (Flask) ===
def run_web_app():
    from flask import Flask, render_template
    app = Flask(__name__)
    DATA_FILE = "/app/data/server_status.json"

    def load_status():
        if not os.path.exists(DATA_FILE): return {}
        try:
            with open(DATA_FILE, 'r') as f: return json.load(f)
        except: return {}

    @app.route('/')
    def index():
        status = load_status()
        for s in status.values():
            if "timestamp" in s:
                try:
                    dt = datetime.fromisoformat(s["timestamp"])
                    s["ago"] = f"{(datetime.now() - dt).seconds // 60} –º–∏–Ω –Ω–∞–∑–∞–¥"
                except: s["ago"] = "?"
        return render_template("status.html", servers=status)
    app.run(host="0.0.0.0", port=5000)

# === –ó–∞–ø—É—Å–∫ ===
def main():
    global monitoring_job, server_status

    app_builder = ApplicationBuilder().token(TOKEN)
    application = app_builder.build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_SERVER: [CallbackQueryHandler(select_action, pattern=r"^server:.+")],
            SELECTING_ACTION: [
                CallbackQueryHandler(execute_action, pattern=r"^action:.+"),
                CallbackQueryHandler(back_to_servers, pattern=r"^back_to_servers$")
            ],
            ENTERING_COMMAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_command_input)]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_operation, pattern=r"^cancel$"),
            CommandHandler("cancel", cancel)
        ],
    )

    application.add_handler(conv_handler)
    job_queue = application.job_queue
    job_queue.run_repeating(periodic_check, interval=CHECK_INTERVAL, first=10)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    from threading import Thread
    web_thread = Thread(target=run_web_app, daemon=True)
    web_thread.start()

    print("‚úÖ –ë–æ—Ç –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω—ã!")
    application.run_polling()

if __name__ == '__main__':
    main()